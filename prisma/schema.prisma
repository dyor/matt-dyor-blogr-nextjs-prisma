generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contract {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  summary   String?
  renderedContent String?
  isPublished Boolean @default(false)
  isPublic Boolean @default(false)
  isTemplate Boolean @default(false)
  author    User?   @relation(name: "author", fields: [authorId], references: [id])
  authorId  Int?
  firstPartyName String?
  firstPartyEmail String? 
  firstParty    User?   @relation(name: "firstParty", fields: [firstPartyId], references: [id])
  firstPartyId   Int?
  firstPartySignDate  DateTime?
  secondPartyName String? 
  secondPartyEmail String? 
  secondParty    User?   @relation(name: "secondParty", fields: [secondPartyId], references: [id])
  secondPartyId   Int?
  secondPartySignDate DateTime?
  template Contract? @relation(name: "children", fields: [templateId], references: [id])
  templateId Int? 
  children    Contract[] @relation("children")
  startDate DateTime? @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  duration Int? 
  endDate DateTime? 
  amount Decimal? 
  interestRate Decimal? 
  royaltyRate Decimal? 
  royaltyMultiple Decimal? 
  equityPercentage Decimal? 
  showAmount Boolean @default(false)
  showInterestRate Boolean @default(false)
  showRoyaltyRate Boolean @default(false)
  showRoyaltyMultiple Boolean @default(false)
  showEquityPercentage Boolean @default(false)
  // SecondParty    User?   @relation(name: "secondParty", fields: [secondPartyId], references: [id])
  // secondPartyId  Int?
  
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  authors         Contract[]    @relation(name: "author")
  firstParties  Contract[]    @relation(name: "firstParty")
  secondParties  Contract[]    @relation(name: "secondParty")
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
